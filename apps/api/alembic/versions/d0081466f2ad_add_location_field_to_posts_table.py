"""Add location field to posts table

Revision ID: d0081466f2ad
Revises: 005_add_last_updated_at_field
Create Date: 2025-08-27 13:44:33.657719

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd0081466f2ad'
down_revision = '005_add_last_updated_at_field'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop tables only if they exist (conditional drops for fresh database compatibility)
    
    # Use try/except for safer table drops
    try:
        op.drop_table('follows')
    except Exception:
        pass  # Table doesn't exist, continue
    
    try:
        op.drop_table('comments')
    except Exception:
        pass  # Table doesn't exist, continue
    
    try:
        op.drop_index('ix_notification_user_id', table_name='notification')
    except Exception:
        pass  # Index doesn't exist, continue
        
    try:
        op.drop_table('notification')
    except Exception:
        pass  # Table doesn't exist, continue
    op.alter_column('emoji_reactions', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('emoji_reactions', 'post_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_constraint('emoji_reactions_user_id_post_id_key', 'emoji_reactions', type_='unique')
    op.drop_index('idx_emoji_reactions_created_at', table_name='emoji_reactions')
    op.drop_index('idx_emoji_reactions_post_id', table_name='emoji_reactions')
    op.drop_index('idx_emoji_reactions_user_id', table_name='emoji_reactions')
    op.create_unique_constraint('unique_user_post_reaction', 'emoji_reactions', ['user_id', 'post_id'])
    op.drop_constraint('emoji_reactions_post_id_fkey', 'emoji_reactions', type_='foreignkey')
    op.drop_constraint('emoji_reactions_user_id_fkey', 'emoji_reactions', type_='foreignkey')
    op.create_foreign_key(None, 'emoji_reactions', 'posts', ['post_id'], ['id'])
    op.create_foreign_key(None, 'emoji_reactions', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'likes', 'posts', ['post_id'], ['id'])
    op.create_foreign_key(None, 'likes', 'users', ['user_id'], ['id'])
    op.alter_column('notifications', 'last_updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('posts', 'author_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('posts', 'post_type',
               existing_type=postgresql.ENUM('daily', 'photo', 'spontaneous', name='posttype'),
               type_=sa.Enum('daily', 'photo', 'spontaneous', name='posttype', schema='public'),
               nullable=False,
               existing_server_default=sa.text("'daily'::posttype"))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.drop_constraint('users_username_key', 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint('users_username_key', 'users', ['username'])
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('posts', 'post_type',
               existing_type=sa.Enum('daily', 'photo', 'spontaneous', name='posttype', schema='public'),
               type_=postgresql.ENUM('daily', 'photo', 'spontaneous', name='posttype'),
               nullable=True,
               existing_server_default=sa.text("'daily'::posttype"))
    op.alter_column('posts', 'author_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('notifications', 'last_updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_constraint(None, 'likes', type_='foreignkey')
    op.drop_constraint(None, 'likes', type_='foreignkey')
    op.drop_constraint(None, 'emoji_reactions', type_='foreignkey')
    op.drop_constraint(None, 'emoji_reactions', type_='foreignkey')
    op.create_foreign_key('emoji_reactions_user_id_fkey', 'emoji_reactions', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('emoji_reactions_post_id_fkey', 'emoji_reactions', 'posts', ['post_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('unique_user_post_reaction', 'emoji_reactions', type_='unique')
    op.create_index('idx_emoji_reactions_user_id', 'emoji_reactions', ['user_id'], unique=False)
    op.create_index('idx_emoji_reactions_post_id', 'emoji_reactions', ['post_id'], unique=False)
    op.create_index('idx_emoji_reactions_created_at', 'emoji_reactions', ['created_at'], unique=False)
    op.create_unique_constraint('emoji_reactions_user_id_post_id_key', 'emoji_reactions', ['user_id', 'post_id'])
    op.alter_column('emoji_reactions', 'post_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('emoji_reactions', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_table('notification',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('priority', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('channel', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('read_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='notification_pkey')
    )
    op.create_index('ix_notification_user_id', 'notification', ['user_id'], unique=False)
    op.create_table('comments',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('author_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('post_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('parent_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['comments.id'], name='comments_parent_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='comments_pkey')
    )
    op.create_table('follows',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('follower_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('followed_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='follows_pkey'),
    sa.UniqueConstraint('follower_id', 'followed_id', name='unique_follow')
    )
    # ### end Alembic commands ###