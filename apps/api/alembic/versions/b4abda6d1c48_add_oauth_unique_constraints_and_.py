"""Add OAuth unique constraints and security enhancements

Revision ID: b4abda6d1c48
Revises: 12159fb7ca28
Create Date: 2025-09-27 06:00:21.409273

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b4abda6d1c48'
down_revision = 'd23c18f82103'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('posts', 'post_type',
               existing_type=postgresql.ENUM('daily', 'photo', 'spontaneous', name='posttype'),
               type_=sa.Enum('daily', 'photo', 'spontaneous', name='posttype', schema='public'),
               existing_nullable=False,
               existing_server_default=sa.text("'daily'::posttype"))
    
    # Add OAuth fields to users table (production safe)
    # Check if columns exist before adding them
    connection = op.get_bind()
    
    # Check if oauth_provider column exists
    result = connection.execute(sa.text("""
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name='users' AND column_name='oauth_provider'
    """))
    if not result.fetchone():
        op.add_column('users', sa.Column('oauth_provider', sa.String(length=50), nullable=True))
    
    # Check if oauth_id column exists
    result = connection.execute(sa.text("""
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name='users' AND column_name='oauth_id'
    """))
    if not result.fetchone():
        op.add_column('users', sa.Column('oauth_id', sa.String(length=255), nullable=True))
    
    # Check if oauth_data column exists
    result = connection.execute(sa.text("""
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name='users' AND column_name='oauth_data'
    """))
    if not result.fetchone():
        op.add_column('users', sa.Column('oauth_data', sa.JSON(), nullable=True))
    
    # Create indexes if they don't exist
    try:
        op.create_index(op.f('ix_users_oauth_id'), 'users', ['oauth_id'], unique=False)
    except Exception:
        # Index might already exist, ignore
        pass
    
    try:
        op.create_index(op.f('ix_users_oauth_provider'), 'users', ['oauth_provider'], unique=False)
    except Exception:
        # Index might already exist, ignore
        pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Remove OAuth fields from users table
    try:
        op.drop_index(op.f('ix_users_oauth_provider'), table_name='users')
    except Exception:
        pass
    
    try:
        op.drop_index(op.f('ix_users_oauth_id'), table_name='users')
    except Exception:
        pass
    
    try:
        op.drop_column('users', 'oauth_data')
    except Exception:
        pass
    
    try:
        op.drop_column('users', 'oauth_id')
    except Exception:
        pass
    
    try:
        op.drop_column('users', 'oauth_provider')
    except Exception:
        pass
    
    op.alter_column('posts', 'post_type',
               existing_type=sa.Enum('daily', 'photo', 'spontaneous', name='posttype', schema='public'),
               type_=postgresql.ENUM('daily', 'photo', 'spontaneous', name='posttype'),
               existing_nullable=False,
               existing_server_default=sa.text("'daily'::posttype"))
    # ### end Alembic commands ###