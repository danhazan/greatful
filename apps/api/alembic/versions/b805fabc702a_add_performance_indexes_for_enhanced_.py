"""add_performance_indexes_for_enhanced_algorithm

Revision ID: b805fabc702a
Revises: 8551c0101b00
Create Date: 2025-09-14 21:07:17.158070

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b805fabc702a'
down_revision = '8551c0101b00'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('posts', 'post_type',
               existing_type=postgresql.ENUM('daily', 'photo', 'spontaneous', name='posttype'),
               type_=sa.Enum('daily', 'photo', 'spontaneous', name='posttype', schema='public'),
               existing_nullable=False,
               existing_server_default=sa.text("'daily'::posttype"))
    
    # Performance indexes for enhanced algorithm
    
    # Composite indexes for feed algorithm queries
    op.create_index('idx_posts_user_created_at', 'posts', ['author_id', 'created_at'])
    op.create_index('idx_posts_public_created_at', 'posts', ['is_public', 'created_at'])
    op.create_index('idx_posts_type_created_at', 'posts', ['post_type', 'created_at'])
    
    # Engagement count indexes for scoring
    op.create_index('idx_posts_hearts_count', 'posts', ['hearts_count'])
    op.create_index('idx_posts_reactions_count', 'posts', ['reactions_count'])
    op.create_index('idx_posts_shares_count', 'posts', ['shares_count'])
    
    # Composite engagement index for algorithm scoring
    op.create_index('idx_posts_engagement_created_at', 'posts', 
                   ['hearts_count', 'reactions_count', 'shares_count', 'created_at'])
    
    # User feed optimization indexes
    op.create_index('idx_users_last_feed_view', 'users', ['last_feed_view'])
    
    # Follow relationship optimization indexes
    op.create_index('idx_follows_follower_followed', 'follows', ['follower_id', 'followed_id'])
    op.create_index('idx_follows_status_created_at', 'follows', ['status', 'created_at'])
    
    # User interaction optimization indexes for preference learning
    op.create_index('idx_user_interactions_user_created_at', 'user_interactions', ['user_id', 'created_at'])
    op.create_index('idx_user_interactions_target_created_at', 'user_interactions', ['target_user_id', 'created_at'])
    op.create_index('idx_user_interactions_type_created_at', 'user_interactions', ['interaction_type', 'created_at'])
    
    # Time-based query optimization indexes
    op.create_index('idx_posts_created_at_desc', 'posts', [sa.text('created_at DESC')])
    op.create_index('idx_user_interactions_created_at_desc', 'user_interactions', [sa.text('created_at DESC')])
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # Drop performance indexes
    op.drop_index('idx_user_interactions_created_at_desc', 'user_interactions')
    op.drop_index('idx_posts_created_at_desc', 'posts')
    op.drop_index('idx_user_interactions_type_created_at', 'user_interactions')
    op.drop_index('idx_user_interactions_target_created_at', 'user_interactions')
    op.drop_index('idx_user_interactions_user_created_at', 'user_interactions')
    op.drop_index('idx_follows_status_created_at', 'follows')
    op.drop_index('idx_follows_follower_followed', 'follows')
    op.drop_index('idx_users_last_feed_view', 'users')
    op.drop_index('idx_posts_engagement_created_at', 'posts')
    op.drop_index('idx_posts_shares_count', 'posts')
    op.drop_index('idx_posts_reactions_count', 'posts')
    op.drop_index('idx_posts_hearts_count', 'posts')
    op.drop_index('idx_posts_type_created_at', 'posts')
    op.drop_index('idx_posts_public_created_at', 'posts')
    op.drop_index('idx_posts_user_created_at', 'posts')
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('posts', 'post_type',
               existing_type=sa.Enum('daily', 'photo', 'spontaneous', name='posttype', schema='public'),
               type_=postgresql.ENUM('daily', 'photo', 'spontaneous', name='posttype'),
               existing_nullable=False,
               existing_server_default=sa.text("'daily'::posttype"))
    # ### end Alembic commands ###